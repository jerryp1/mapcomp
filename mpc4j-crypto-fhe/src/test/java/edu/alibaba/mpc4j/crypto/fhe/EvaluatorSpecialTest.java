package edu.alibaba.mpc4j.crypto.fhe;


import edu.alibaba.mpc4j.crypto.fhe.context.Context;
import edu.alibaba.mpc4j.crypto.fhe.keys.PublicKey;
import edu.alibaba.mpc4j.crypto.fhe.keys.RelinKeys;
import edu.alibaba.mpc4j.crypto.fhe.modulus.CoeffModulus;
import edu.alibaba.mpc4j.crypto.fhe.modulus.Modulus;
import edu.alibaba.mpc4j.crypto.fhe.params.EncryptionParams;
import edu.alibaba.mpc4j.crypto.fhe.params.SchemeType;
import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;

public class EvaluatorSpecialTest {


    private static final int MAX_LOOP = 100;



    @Test
    public void a() {

    }


    @Test
    public void relinearTestRandom() {
        for (int i = 0; i < MAX_LOOP; i++) {
            reLinearTest();
        }
    }

    @Test
    public void reLinearTest() {


        EncryptionParams parms = new EncryptionParams(SchemeType.BFV);
        Modulus plainModulus = new Modulus(1 << 6);
        parms.setPolyModulusDegree(128);
        parms.setPlainModulus(plainModulus);
        parms.setCoeffModulus(CoeffModulus.create(128, new int[]{40, 40, 40, 40}));

//        parms.setCoeffModulus(
//                new long[] {1099511600897L, 1099511603713L, 1099511607041L, 1099511619841L}
//        );

        for (Modulus modulus : parms.getCoeffModulus()) {
            System.out.println(modulus.getValue());
        }


        Context context = new Context(parms, true, CoeffModulus.SecurityLevelType.NONE);
        KeyGenerator keyGenerator = new KeyGenerator(context);
        PublicKey pk = new PublicKey();
        keyGenerator.createPublicKey(pk);
        RelinKeys relinKeys = new RelinKeys();
        keyGenerator.createRelinKeys(relinKeys);


//        System.out.println(relinKeys.data()[0].length);
//        System.out.println("relinKeys: \n");
//        System.out.println("(0, 0): \n" + Arrays.toString(relinKeys.data(0)[0].data().getData()));
//        System.out.println("(0, 1): \n" + Arrays.toString(relinKeys.data(0)[1].data().getData()));
//        System.out.println("(0, 2): \n" + Arrays.toString(relinKeys.data(0)[2].data().getData()));





        Evaluator evaluator = new Evaluator(context);
        Encryptor encryptor = new Encryptor(context, pk);
        Decryptor decryptor = new Decryptor(context, keyGenerator.getSecretKey());

        Ciphertext encrypted = new Ciphertext();
        Ciphertext encrypted2 = new Ciphertext();
        Plaintext plain = new Plaintext();
        Plaintext plain2 = new Plaintext();

        plain.fromHexPoly("0");
        encryptor.encrypt(plain, encrypted);

        System.out.println("encrypted:\n" + Arrays.toString(encrypted.getData()));

        evaluator.squareInplace(encrypted);

        System.out.println("encrypted^2:\n" + Arrays.toString(encrypted.getData()));

        evaluator.reLinearizeInplace(encrypted, relinKeys);

//        System.out.println(encrypted.getData().length);
//        System.out.println(encrypted.getDynArray().size());
//        System.out.println(encrypted.getDynArray().capacity());

//        encrypted.getDynArray().setData(
//                new long[] {80077548070L, 416761702598L, 269842227591L, 102580315548L, 683159281262L, 740947515713L, 432520356331L, 794346840789L, 724438780154L, 928482045438L, 154054087346L, 892009116467L, 274070937838L, 708678958433L, 518413845506L, 108612361130L, 364000606161L, 609135816703L, 970376730970L, 149316336104L, 566861673400L, 865271451263L, 725728514345L, 363721140284L, 1093956881718L, 302975350189L, 499963897551L, 753516551763L, 508540422816L, 726367620934L, 572216984097L, 511407813698L, 34963242308L, 212610671383L, 338179028659L, 722038863244L, 594385231821L, 925182367303L, 29633849780L, 100898853969L, 724383847653L, 650991338629L, 824564787429L, 142285688547L, 554903290128L, 623194331117L, 5354198143L, 284427563414L, 29128063175L, 568669518014L, 818340408633L, 588411390191L, 847458865056L, 624740100201L, 1015185355859L, 406943325915L, 436993340133L, 800561796725L, 271986377634L, 240491825019L, 436684577634L, 388484560112L, 235486149511L, 184167125731L, 114710502686L, 820938443989L, 443176848591L, 672718597479L, 570967042207L, 513082761914L, 333495848205L, 978805481418L, 377568079488L, 186798304580L, 653689055160L, 150994849596L, 865339004360L, 241367288764L, 436780247530L, 152152407364L, 907217379665L, 498372774363L, 1087328758953L, 81585660370L, 1057843769521L, 1011367745503L, 295795156071L, 701926410789L, 553529982853L, 907062694438L, 530418979421L, 906353757835L, 424168167187L, 442034112710L, 257976191968L, 389933058826L, 631514332162L, 832498696013L, 757021887635L, 936524142968L, 639827366507L, 46646215459L, 520631108571L, 399949517627L, 50373237717L, 500417610784L, 158469852274L, 313994340894L, 289323197917L, 1081895323218L, 952805712522L, 997908278065L, 317412454712L, 247341225171L, 44121080815L, 83521431865L, 612392873369L, 217576444330L, 628052984643L, 648359531738L, 222396131918L, 931116448026L, 768858103270L, 114597461821L, 341460504150L, 632177965507L, 297225742534L, 169349188628L, 607243766938L, 93553324715L, 703353730175L, 566765485058L, 9293930324L, 382548223112L, 1096155032152L, 953146871563L, 592160378111L, 324746603296L, 294886872526L, 824177830630L, 942357729046L, 340291893628L, 203667295726L, 824416226895L, 97378579142L, 1046676755496L, 944985288915L, 863905935770L, 702910304561L, 135408533181L, 634071497959L, 34719841684L, 648542187270L, 452687481356L, 785247215884L, 555828888152L, 687997726186L, 69743127346L, 350964407403L, 806727944289L, 342082452380L, 458731087822L, 933510371011L, 489843885712L, 170139992545L, 15357473456L, 627526077984L, 367692366005L, 40193320851L, 47322771582L, 182688822005L, 436457110719L, 952597254031L, 1061658489853L, 117646236947L, 837263799733L, 825312282317L, 97380427795L, 763743070600L, 724399670708L, 499454695481L, 728200542424L, 655594675609L, 495376709343L, 351356254915L, 962137401749L, 115030463159L, 638024076818L, 948147239580L, 761092532886L, 225666606048L, 19265113172L, 390894357094L, 226744437776L, 447476137635L, 1002535978066L, 248770279184L, 400611604351L, 597538578234L, 26731948151L, 285164874024L, 775028274017L, 1095145579495L, 705437994435L, 559056478168L, 475285616878L, 136823559855L, 48983523744L, 188893801209L, 94977424368L, 868788631832L, 471528785742L, 894894709915L, 933735096119L, 721486071559L, 92501219474L, 683059236473L, 128961494995L, 391381251926L, 861672279388L, 836259486631L, 124511823821L, 793662199170L, 492489895824L, 545161985641L, 573237479521L, 262611948863L, 603462210769L, 1009431441856L, 23416992167L, 493839093782L, 680308907090L, 13086343646L, 450741936196L, 290997953045L, 792644755123L, 70208656579L, 950961923664L, 24482474170L, 692745299475L, 1033095115047L, 969574261624L, 468157062659L, 369924833852L, 839763473776L, 82607020709L, 600527584933L, 688978597327L, 564474020957L, 72416473350L, 766853061960L, 1067709407226L, 222651499502L, 630661994123L, 36739456462L, 937085300688L, 59348185692L, 345525812103L, 626923914287L, 962255529108L, 185656948086L, 617934452523L, 807214119604L, 1006562728477L, 220811829735L, 215356731052L, 69952462364L, 471478911361L, 569309043895L, 988725345181L, 919521584529L, 484552750083L, 462327734398L, 176920906634L, 707853413617L, 549076807070L, 974359635204L, 930147293157L, 203676286286L, 98973707274L, 1012590373349L, 1022048348932L, 980035336768L, 676711577998L, 1029709244552L, 487047167831L, 487912385560L, 66588955035L, 161760284990L, 672482655302L, 491004884763L, 898702356891L, 743975316958L, 973716023964L, 883245597584L, 619188710444L, 636201655907L, 385842161509L, 538638878984L, 339410310305L, 445839052625L, 762768363917L, 127629677988L, 1050115155422L, 977634099419L, 9837243583L, 563351022063L, 648038943373L, 950067215170L, 65134232207L, 657831874882L, 621092097265L, 626755796168L, 139968691522L, 384181548537L, 930748411999L, 674097509241L, 803854080122L, 825671383508L, 357513832537L, 781988549399L, 849114913222L, 439143065256L, 907909907468L, 738569335624L, 253621648669L, 633991112139L, 530672645766L, 210281757387L, 518040963196L, 425823655004L, 591115650198L, 72275391019L, 250893931000L, 1039122886346L, 418826531416L, 722183560814L, 945496419436L, 561671482644L, 165539213080L, 523879032960L, 472006026297L, 278356913974L, 287117215226L, 205947964022L, 619594268690L, 656122169867L, 860005356835L, 335279896919L, 166935434678L, 225911970862L, 966625084127L, 706772087083L, 573223776481L, 146335226679L, 281903007247L, 1086962345367L, 647626683031L, 18091772968L, 979801545851L, 604028337151L, 1068476513382L, 802770982430L, 661795852309L, 302359680246L, 725237201169L, 547431548093L, 424466469692L, 735603612199L, 981847212160L, 138718027355L, 373836429902L, 279464740092L, 1023514225869L, 18912952537L, 263446538646L, 133449679651L, 225880572194L, 767683471301L, 237118805143L, 960405492553L, 879067982500L, 892183495376L, 784296360878L, 656010360910L, 975565082547L, 274667101572L, 201603876492L, 653835765662L, 576853807813L, 244955255932L, 863937264442L, 789152603957L, 1096367584783L, 142314833318L, 664906137068L, 937427505402L, 386129313276L, 1087358551105L, 804372697533L, 368908830685L, 1068180255734L, 434055145314L, 717577145648L, 409914146209L, 726031870471L, 343128513030L, 1013741148499L, 82773284498L, 317966492819L, 940489873558L, 495139280427L, 823679457439L, 628952147752L, 228387786069L, 518384992521L, 270726539805L, 174041069036L, 372502277104L, 55335373542L, 993619279291L, 630079782398L, 425301243159L, 160718189364L, 490927530890L, 92309322907L, 131162157330L, 140672881615L, 263790062264L, 1057620743949L, 7459168160L, 549137133136L, 329827403881L, 792440080317L, 771370341309L, 825836520190L, 644333269772L, 1012671178191L, 500690660194L, 1032638994565L, 253112669931L, 872295361351L, 173589682062L, 686078960388L, 1061429749226L, 280551996360L, 677766031622L, 752411164768L, 511122629196L, 196185543752L, 639724183465L, 49484826675L, 956778860079L, 39518284536L, 277627783204L, 914698696636L, 111605083229L, 434315087330L, 681386618919L, 584795685256L, 567388915056L, 140525803252L, 94841565725L, 14678538685L, 399851595306L, 502758709325L, 935703411263L, 644786438666L, 961337315365L, 691641130565L, 820131595017L, 1047500443823L, 340224458670L, 930741801013L, 45981842050L, 748524756193L, 813898442489L, 424277607497L, 112415259366L, 515311925013L, 808296321766L, 662392552490L, 843740189424L, 37381479584L, 66728758126L, 616133997895L, 268202058765L, 53300801295L, 450916006963L, 633379695775L, 932044093655L, 737477392082L, 262663792355L, 136445926971L, 577951586056L, 785148782706L, 63386865641L, 135142727488L, 451745016429L, 982492855393L, 422753318254L, 417737043167L, 294488993156L, 875839341846L, 277011491589L, 601179568859L, 497016286915L, 431191111156L, 843568026668L, 309928844708L, 125453115814L, 787011635408L, 137545881605L, 436723804956L, 185368357458L, 1084887870749L, 827670897012L, 440137701628L, 1063315409530L, 591092696095L, 431853589397L, 763969493245L, 1033094799725L, 885518425364L, 225137902383L, 1040692048258L, 158310611735L, 961430918747L, 321052215395L, 1035232239377L, 321318069725L, 687167912969L, 653211012081L, 22701356910L, 679209361195L, 684989542612L, 819259309238L, 717187156907L, 973292779133L, 97184840672L, 914855826712L, 353620799511L, 839534881702L, 461264656673L, 177856873972L, 80844009565L, 543117469740L, 388337401803L, 852412558147L, 19203991280L, 900730234053L, 596971254943L, 880532430852L, 299866542264L, 436989062946L, 58175774464L, 859536569353L, 880479819841L, 370519017045L, 987809200924L, 517811834701L, 215959594271L, 794753609516L, 291034185314L, 112527542802L, 879080877116L, 20479612065L, 744300628451L, 889884852229L, 58535316056L, 1020214852682L, 68049225897L, 600418096826L, 683518871806L, 324736938103L, 946060255777L, 297781694364L, 798049267641L, 157490322380L, 675286028819L, 30463995392L, 766729920160L, 945658467812L, 404101741709L, 525006121000L, 618570326713L, 32836539133L, 696065001887L, 690653609956L, 643749247572L, 36360400715L, 398284521496L, 486301171258L, 487132113563L, 839480331975L, 914231890504L, 415727705652L, 429532365290L, 847690994980L, 290073240883L, 935099150255L, 20452660322L, 740007090682L, 832394050317L, 967800129378L, 755344204666L, 801849023874L, 630257020846L, 268078287978L, 606034788638L, 706179631269L, 381055807820L, 116464117664L, 745494493363L, 1005363545297L, 147848735880L, 1047134136784L, 608976681571L, 39779872793L, 539917473877L, 664164324239L, 349343413471L, 70947007164L, 1044123839516L, 157231162147L, 512880894036L, 955381854931L, 524600912373L, 376415518755L, 870348267134L, 712226487636L, 97984330887L, 15116956046L, 265681563011L, 364667711031L, 711899160590L, 747033859750L, 477726908843L, 962761891373L, 77671559021L, 592958420880L, 796165577581L, 1050562323816L, 418220373410L, 365099830417L, 602000310054L, 882743634785L, 118925657163L, 753095407387L, 315445802631L, 441311611799L, 482515373250L, 966687601690L, 466766159515L, 279456074921L, 143728361693L, 147171796991L, 584530300828L, 879493747789L, 377383771835L, 1065535491601L, 928290005210L, 571942220532L, 864488431802L, 532381250077L, 777477289170L, 43558329524L, 841611751286L, 66789537911L, 942050736503L, 198599753846L, 91339397544L, 384843816099L, 470440354538L, 944212228784L, 424927102963L, 713047281747L, 479952784541L, 927848397601L, 218893493186L, 172561609079L, 139076304024L, 351103779765L, 83792217925L, 255359535023L, 364447830833L, 501616424723L, 56438677100L, 947330463234L, 1047800241383L, 922389376289L, 560395870368L, 698366731655L, 952101996229L, 80009490490L, 662483446826L, 601344352696L, 135572305076L, 263230707293L, 49782800188L, 838269362243L, 450224853011L, 242016482393L, 658759266192L, 442059323243L, 376764196460L, 1026293263748L, 347563640569L, 917662478797L, 567752759654L, 253496673196L, 233425306836L, 688925671236L, 946888935114L, 497524896618L, 303695719310L, 768445461118L, 348469279991L, 878792757806L, 770741299549L, 396605936769L, 32265281810L, 256122834217L, 670056082495L, 1081892568191L, 470544248930L, 577418573004L, 334965481747L, 964586050972L, 498846665572L, 395017105493L, 700418570597L, 968121092270L, 694172391396L, 300946382952L, 801400597377L, 255276657408L, 558908152097L, 624540722036L, 6994075638L, 287554851468L, 238447098612L, 312288287021L, 661163659027L, 887509004999L, 354730987644L, 14247866492L, 533650466592L, 757012971424L, 718816568898L, 882069349101L, 80067023849L, 876474226095L, 752658781158L, 655444561677L, 280304640723L, 969227189415L, 699547769931L, 762479519821L, 243772825778L, 396914142142L, 635021093910L, 711586801962L, 207833600514L, 952644317786L, 538868845451L, 1062194799011L, 411101879485L}
//        );

        System.out.println("encrypted^2 relinear:\n" + Arrays.toString(encrypted.getData()));


        decryptor.decrypt(encrypted, plain2);
        Assert.assertEquals(plain, plain2);



        plain.fromHexPoly("1x^10 + 2");
        encryptor.encrypt(plain, encrypted);
        evaluator.squareInplace(encrypted);
        evaluator.reLinearizeInplace(encrypted, relinKeys);
        decryptor.decrypt(encrypted, plain2);
        Assert.assertEquals(
                plain2.toString(),
                "1x^20 + 4x^10 + 4");


        encryptor.encrypt(plain, encrypted);
        evaluator.squareInplace(encrypted);
        evaluator.reLinearizeInplace(encrypted, relinKeys);
        // 连续两次
        evaluator.squareInplace(encrypted);
        evaluator.reLinearizeInplace(encrypted, relinKeys);

        decryptor.decrypt(encrypted, plain2);
        Assert.assertEquals(
                plain2.toString(),
                "1x^40 + 8x^30 + 18x^20 + 20x^10 + 10");

        // Relinearization with modulus switching
        plain.fromHexPoly("1x^10 + 2");
        encryptor.encrypt(plain, encrypted);
        evaluator.squareInplace(encrypted);
        evaluator.reLinearizeInplace(encrypted, relinKeys);
        // mod switch
        evaluator.modSwitchToNextInplace(encrypted);
        decryptor.decrypt(encrypted, plain2);
        Assert.assertEquals(
                plain2.toString(),
                "1x^20 + 4x^10 + 4");


        encryptor.encrypt(plain, encrypted);
        evaluator.squareInplace(encrypted);
        evaluator.reLinearizeInplace(encrypted, relinKeys);
        evaluator.modSwitchToNextInplace(encrypted);
        // 连续两次
        evaluator.squareInplace(encrypted);
        evaluator.reLinearizeInplace(encrypted, relinKeys);
        evaluator.modSwitchToNextInplace(encrypted);

        decryptor.decrypt(encrypted, plain2);
        Assert.assertEquals(
                plain2.toString(),
                "1x^40 + 8x^30 + 18x^20 + 20x^10 + 10");

    }
}
